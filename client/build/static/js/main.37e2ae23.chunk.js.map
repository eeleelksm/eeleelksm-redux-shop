{"version":3,"sources":["assets/spinner.gif","utils/reducers.js","utils/actions.js","utils/GlobalState.js","utils/helpers.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","console","log","useStoreContext","useContext","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","ProductItem","item","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_CHECKOUT","gql","QUERY_PRODUCTS","QUERY_CATEGORIES","QUERY_USER","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","useState","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.37e2ae23.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","import { useReducer } from \"react\";\n\nimport {\n\tUPDATE_PRODUCTS,\n\tUPDATE_CATEGORIES,\n\tUPDATE_CURRENT_CATEGORY,\n\tADD_TO_CART,\n\tADD_MULTIPLE_TO_CART,\n\tREMOVE_FROM_CART,\n\tUPDATE_CART_QUANTITY,\n\tCLEAR_CART,\n\tTOGGLE_CART,\n} from \"./actions\";\n\nexport const reducer = (state, action) => {\n\tswitch (action.type) {\n\t\t// if action type value is the value of \"UPDATE_PRODUCTS\", return a new state object with an updated products array\n\t\tcase UPDATE_PRODUCTS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tproducts: [...action.products],\n\t\t\t};\n\n\t\tcase UPDATE_CATEGORIES:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcategories: [...action.categories],\n\t\t\t};\n\n\t\tcase UPDATE_CURRENT_CATEGORY:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrentCategory: action.currentCategory,\n\t\t\t};\n\n\t\tcase ADD_TO_CART:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcartOpen: true,\n\t\t\t\tcart: [...state.cart, action.product],\n\t\t\t};\n\n\t\tcase ADD_MULTIPLE_TO_CART:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcart: [...state.cart, ...action.products],\n\t\t\t};\n\n\t\tcase REMOVE_FROM_CART:\n\t\t\tlet newState = state.cart.filter((product) => {\n\t\t\t\treturn product._id !== action._id;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcartOpen: newState.length > 0,\n\t\t\t\tcart: newState,\n\t\t\t};\n\n\t\tcase UPDATE_CART_QUANTITY:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcartOpen: true,\n\t\t\t\tcart: state.cart.map((product) => {\n\t\t\t\t\tif (action._id === product._id) {\n\t\t\t\t\t\tproduct.purchaseQuantity = action.purchaseQuantity;\n\t\t\t\t\t}\n\t\t\t\t\treturn product;\n\t\t\t\t}),\n\t\t\t};\n\n\t\tcase CLEAR_CART:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcartOpen: false,\n\t\t\t\tcart: [],\n\t\t\t};\n\n\t\tcase TOGGLE_CART:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcartOpen: !state.cartOpen,\n\t\t\t};\n\n\t\t// if it's none of these actions do not update state at all and keep things the same\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport function useProductReducer(initialState) {\n\treturn useReducer(reducer, initialState);\n}\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\nexport const CLEAR_CART = \"CLEAR_CART\";\nexport const TOGGLE_CART = \"TOGGLE_CART\";\n","import React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from \"./reducers\";\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value = [], ...props }) => {\n\tconst [state, dispatch] = useProductReducer({\n\t\tproducts: [],\n\t\tcart: [],\n\t\tcartOpen: false,\n\t\tcategories: [],\n\t\tcurrentCategory: \"\",\n\t});\n\n\t// use this to confirm it works!\n\tconsole.log(state);\n\treturn <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n\treturn useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };\n","export function pluralize(name, count) {\n\tif (count === 1) {\n\t\treturn name;\n\t}\n\treturn name + \"s\";\n}\n\nexport function idbPromise(storeName, method, object) {\n\treturn new Promise((resolve, reject) => {\n\t\t// open connection to the database `shop-shop` with the version of 1\n\t\tconst request = window.indexedDB.open(\"shop-shop\", 1);\n\t\t// create variables to hold reference to the database, transaction (tx), and object store\n\t\tlet db, tx, store;\n\n\t\t// if version has changed (or if this is the first time using the database), run this method and create the three object stores\n\t\trequest.onupgradeneeded = function (e) {\n\t\t\tconst db = request.result;\n\t\t\t// create object store for each type of data and set \"primary\" key index to be the \"_id\" of the data\n\t\t\tdb.createObjectStore(\"products\", { keyPath: \"_id\" });\n\t\t\tdb.createObjectStore(\"categories\", { keyPath: \"_id\" });\n\t\t\tdb.createObjectStore(\"cart\", { keyPath: \"_id\" });\n\t\t};\n\n\t\t// handle any errors with connecting\n\t\trequest.onerror = function (e) {\n\t\t\tconsole.log(\"There was an error\");\n\t\t};\n\n\t\t// on database open success\n\t\trequest.onsuccess = function (e) {\n\t\t\t// save a reference of the atabase to the \"db\" variable\n\t\t\tdb = request.result;\n\t\t\t// open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n\t\t\ttx = db.transaction(storeName, \"readwrite\");\n\t\t\t// save a reference to that object store\n\t\t\tstore = tx.objectStore(storeName);\n\n\t\t\t// if there's any errors, let us know\n\t\t\tdb.onerror = function (e) {\n\t\t\t\tconsole.log(\"error\", e);\n\t\t\t};\n\n\t\t\tswitch (method) {\n\t\t\t\tcase \"put\":\n\t\t\t\t\tstore.put(object);\n\t\t\t\t\tresolve(object);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"get\":\n\t\t\t\t\tconst all = store.getAll();\n\t\t\t\t\tall.onsuccess = function () {\n\t\t\t\t\t\tresolve(all.result);\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"delete\":\n\t\t\t\t\tstore.delete(object._id);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log(\"No valid method\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// when the transaction is complete, close the connection\n\t\t\ttx.oncomplete = function () {\n\t\t\t\tdb.close();\n\t\t\t};\n\t\t};\n\t});\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductItem(item) {\n\tconst { image, name, _id, price, quantity } = item;\n\tconst [state, dispatch] = useStoreContext();\n\tconst { cart } = state;\n\n\tconst addToCart = () => {\n\t\t// find the cart item with the matching id\n\t\tconst itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\t\tif (itemInCart) {\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_CART_QUANTITY,\n\t\t\t\t_id: _id,\n\t\t\t\tpurchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n\t\t\t});\n\t\t\tidbPromise(\"cart\", \"put\", {\n\t\t\t\t...itemInCart,\n\t\t\t\tpurchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n\t\t\t});\n\t\t} else {\n\t\t\tdispatch({\n\t\t\t\ttype: ADD_TO_CART,\n\t\t\t\tproduct: { ...item, purchaseQuantity: 1 },\n\t\t\t});\n\t\t\tidbPromise(\"cart\", \"put\", { ...item, purchaseQuantity: 1 });\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"card px-1 py-1\">\n\t\t\t<Link to={`/products/${_id}`}>\n\t\t\t\t<img alt={name} src={`/images/${image}`} />\n\t\t\t\t<p>{name}</p>\n\t\t\t</Link>\n\t\t\t<div>\n\t\t\t\t<div>\n\t\t\t\t\t{quantity} {pluralize(\"item\", quantity)} in stock\n\t\t\t\t</div>\n\t\t\t\t<span>${price}</span>\n\t\t\t</div>\n\t\t\t<button onClick={addToCart}>Add to cart</button>\n\t\t</div>\n\t);\n}\n\nexport default ProductItem;\n","import { gql } from \"@apollo/client\";\n\nexport const QUERY_CHECKOUT = gql`\n\tquery getCheckout($products: [ID]!) {\n\t\tcheckout(products: $products) {\n\t\t\tsession\n\t\t}\n\t}\n`;\n\nexport const QUERY_PRODUCTS = gql`\n\tquery getProducts($category: ID) {\n\t\tproducts(category: $category) {\n\t\t\t_id\n\t\t\tname\n\t\t\tdescription\n\t\t\tprice\n\t\t\tquantity\n\t\t\timage\n\t\t\tcategory {\n\t\t\t\t_id\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n\t{\n\t\tproducts {\n\t\t\t_id\n\t\t\tname\n\t\t\tdescription\n\t\t\tprice\n\t\t\tquantity\n\t\t\tcategory {\n\t\t\t\tname\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport const QUERY_CATEGORIES = gql`\n\t{\n\t\tcategories {\n\t\t\t_id\n\t\t\tname\n\t\t}\n\t}\n`;\n\nexport const QUERY_USER = gql`\n\t{\n\t\tuser {\n\t\t\tfirstName\n\t\t\tlastName\n\t\t\torders {\n\t\t\t\t_id\n\t\t\t\tpurchaseDate\n\t\t\t\tproducts {\n\t\t\t\t\t_id\n\t\t\t\t\tname\n\t\t\t\t\tdescription\n\t\t\t\t\tprice\n\t\t\t\t\tquantity\n\t\t\t\t\timage\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n","import React, { useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\nimport spinner from \"../../assets/spinner.gif\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductList({}) {\n\tconst [state, dispatch] = useStoreContext();\n\tconst { currentCategory } = state;\n\tconst { loading, data } = useQuery(QUERY_PRODUCTS);\n\n\tuseEffect(() => {\n\t\t// if there's data to be stored\n\t\tif (data) {\n\t\t\t// let's store it in the global state object\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_PRODUCTS,\n\t\t\t\tproducts: data.products,\n\t\t\t});\n\n\t\t\t// but let's also take each product and save it to IndexedDB using the helper function\n\t\t\tdata.products.forEach((product) => {\n\t\t\t\tidbPromise(\"products\", \"put\", product);\n\t\t\t});\n\t\t\t// add else if to check if \"loading\" is undefined in useQuery() Hook\n\t\t} else if (!loading) {\n\t\t\t// since we're offline, get all of the data from the \"products\" store\n\t\t\tidbPromise(\"products\", \"get\").then((products) => {\n\t\t\t\t// use retrieved data to set global state for offline browsing\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_PRODUCTS,\n\t\t\t\t\tproducts: products,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}, [data, dispatch]);\n\n\tfunction filterProducts() {\n\t\tif (!currentCategory) {\n\t\t\treturn state.products;\n\t\t}\n\t\treturn state.products.filter(\n\t\t\t(product) => product.category._id === currentCategory\n\t\t);\n\t}\n\n\treturn (\n\t\t<div className=\"my-2\">\n\t\t\t<h2>Our Products:</h2>\n\t\t\t{state.products.length ? (\n\t\t\t\t<div className=\"flex-row\">\n\t\t\t\t\t{filterProducts().map((product) => (\n\t\t\t\t\t\t<ProductItem\n\t\t\t\t\t\t\tkey={product._id}\n\t\t\t\t\t\t\t_id={product._id}\n\t\t\t\t\t\t\timage={product.image}\n\t\t\t\t\t\t\tname={product.name}\n\t\t\t\t\t\t\tprice={product.price}\n\t\t\t\t\t\t\tquantity={product.quantity}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<h3>You haven't added any products yet!</h3>\n\t\t\t)}\n\t\t\t{loading ? <img src={spinner} alt=\"loading\" /> : null}\n\t\t</div>\n\t);\n}\n\nexport default ProductList;\n","import React, { useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport {\n\tUPDATE_CATEGORIES,\n\tUPDATE_CURRENT_CATEGORY,\n} from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction CategoryMenu({}) {\n\tconst [state, dispatch] = useStoreContext();\n\tconst { categories } = state;\n\tconst { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n\tuseEffect(() => {\n\t\t// if categoryData exists or has changed from the response of useQuery,\n\t\t// then run dispatch()\n\t\tif (categoryData) {\n\t\t\t// execute our dispatch function with our action object indicating\n\t\t\t// the type of action and the data to set our state for categories to\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_CATEGORIES,\n\t\t\t\tcategories: categoryData.categories,\n\t\t\t});\n\t\t\tcategoryData.categories.forEach((category) => {\n\t\t\t\tidbPromise(\"categories\", \"put\", category);\n\t\t\t});\n\t\t} else if (!loading) {\n\t\t\tidbPromise(\"categories\", \"get\").then((categories) => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_CATEGORIES,\n\t\t\t\t\tcategories: categories,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}, [categoryData, loading, dispatch]);\n\n\tconst handleClick = (id) => {\n\t\tdispatch({\n\t\t\ttype: UPDATE_CURRENT_CATEGORY,\n\t\t\tcurrentCategory: id,\n\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>Choose a Category:</h2>\n\t\t\t{categories.map((item) => (\n\t\t\t\t<button\n\t\t\t\t\tkey={item._id}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\thandleClick(item._id);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{item.name}\n\t\t\t\t</button>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default CategoryMenu;\n","import React from \"react\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartItem = ({ item }) => {\n\tconst [, dispatch] = useStoreContext();\n\n\tconst removeFromCart = (item) => {\n\t\tdispatch({\n\t\t\ttype: REMOVE_FROM_CART,\n\t\t\t_id: item._id,\n\t\t});\n\t\tidbPromise(\"cart\", \"delete\", { ...item });\n\t};\n\n\tconst onChange = (e) => {\n\t\tconst value = e.target.value;\n\n\t\tif (value === \"0\") {\n\t\t\tdispatch({\n\t\t\t\ttype: REMOVE_FROM_CART,\n\t\t\t\t_id: item._id,\n\t\t\t});\n\t\t\tidbPromise(\"cart\", \"delete\", { ...item });\n\t\t} else {\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_CART_QUANTITY,\n\t\t\t\t_id: item._id,\n\t\t\t\tpurchaseQuantity: parseInt(value),\n\t\t\t});\n\t\t\tidbPromise(\"cart\", \"put\", { ...item, purchaseQuantity: parseInt(value) });\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"flex-row\">\n\t\t\t<div>\n\t\t\t\t<img src={`/images/${item.image}`} alt=\"\" />\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<div>\n\t\t\t\t\t{item.name}, ${item.price}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<span>Qty:</span>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tplaceholder=\"1\"\n\t\t\t\t\t\tvalue={item.purchaseQuantity}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<span role=\"img\" aria-label=\"trash\" onClick={() => removeFromCart(item)}>\n\t\t\t\t\t\t🗑️\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default CartItem;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from \"react\";\nimport CartItem from \"../CartItem\";\nimport Auth from \"../../utils/auth\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport { QUERY_CHECKOUT } from \"../../utils/queries\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useLazyQuery } from \"@apollo/client\";\n\nimport \"./style.css\";\n\nconst stripePromise = loadStripe(\"pk_test_TYooMQauvdEDq54NiTphI7jx\");\n\nconst Cart = () => {\n\tconst [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\tconst [state, dispatch] = useStoreContext();\n\tfunction toggleCart() {\n\t\tdispatch({ type: TOGGLE_CART });\n\t}\n\n\tfunction calculateTotal() {\n\t\tlet sum = 0;\n\t\tstate.cart.forEach((item) => {\n\t\t\tsum += item.price * item.purchaseQuantity;\n\t\t});\n\t\treturn sum.toFixed(2);\n\t}\n\n\tfunction submitCheckout() {\n\t\tconst productIds = [];\n\n\t\tstate.cart.forEach((item) => {\n\t\t\tfor (let i = 0; i < item.purchaseQuantity; i++) {\n\t\t\t\tproductIds.push(item._id);\n\t\t\t}\n\t\t});\n\n\t\tgetCheckout({\n\t\t\tvariables: { products: productIds },\n\t\t});\n\t}\n\n\tuseEffect(() => {\n\t\tasync function getCart() {\n\t\t\tconst cart = await idbPromise(\"cart\", \"get\");\n\t\t\tdispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n\t\t}\n\n\t\tif (!state.cart.length) {\n\t\t\tgetCart();\n\t\t}\n\t}, [state.cart.length, dispatch]);\n\n\tuseEffect(() => {\n\t\tif (data) {\n\t\t\tstripePromise.then((res) => {\n\t\t\t\tres.redirectToCheckout({ sessionId: data.checkout.session });\n\t\t\t});\n\t\t}\n\t}, [data]);\n\n\tif (!state.cartOpen) {\n\t\treturn (\n\t\t\t<div className=\"cart-closed\" onClick={toggleCart}>\n\t\t\t\t<span role=\"img\" aria-label=\"trash\">\n\t\t\t\t\t🛒\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn (\n\t\t<div className=\"cart\">\n\t\t\t<div className=\"close\" onClick={toggleCart}>\n\t\t\t\t[close]\n\t\t\t</div>\n\t\t\t<h2>Shopping Cart</h2>\n\t\t\t{state.cart.length ? (\n\t\t\t\t<div>\n\t\t\t\t\t{state.cart.map((item) => (\n\t\t\t\t\t\t<CartItem key={item._id} item={item} />\n\t\t\t\t\t))}\n\t\t\t\t\t<div className=\"flex-row space-between\">\n\t\t\t\t\t\t<strong>Total: ${calculateTotal()}</strong>\n\t\t\t\t\t\t{Auth.loggedIn() ? (\n\t\t\t\t\t\t\t<button onClick={submitCheckout}>Checkout</button>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<span>(log in to check out)</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<h3>\n\t\t\t\t\t<span role=\"img\" aria-label=\"shocked\">\n\t\t\t\t\t\t😱\n\t\t\t\t\t</span>\n\t\t\t\t\tYou haven't added anything to your cart yet!\n\t\t\t\t</h3>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default Cart;\n","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<CategoryMenu />\n\t\t\t<ProductList />\n\t\t\t<Cart />\n\t\t</div>\n\t);\n};\n\nexport default Home;\n","import React, { useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\nimport {\n\tREMOVE_FROM_CART,\n\tUPDATE_CART_QUANTITY,\n\tADD_TO_CART,\n\tUPDATE_PRODUCTS,\n} from \"../utils/actions\";\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport spinner from \"../assets/spinner.gif\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport Cart from \"../components/Cart\";\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Detail() {\n\tconst [state, dispatch] = useStoreContext();\n\tconst { id } = useParams();\n\n\tconst [currentProduct, setCurrentProduct] = useQuery(QUERY_PRODUCTS);\n\tconst { loading, data } = useQuery(QUERY_PRODUCTS);\n\tconst { products, cart } = state;\n\n\tconst addToCart = () => {\n\t\tconst itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n\t\tif (itemInCart) {\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_CART_QUANTITY,\n\t\t\t\t_id: id,\n\t\t\t\tpurchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n\t\t\t});\n\t\t\t// if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n\t\t\tidbPromise(\"cart\", \"put\", {\n\t\t\t\t...itemInCart,\n\t\t\t\tpurchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n\t\t\t});\n\t\t} else {\n\t\t\tdispatch({\n\t\t\t\ttype: ADD_TO_CART,\n\t\t\t\tproduct: { ...currentProduct, purchaseQuantity: 1 },\n\t\t\t});\n\t\t\t// if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n\t\t\tidbPromise(\"cart\", \"put\", { ...currentProduct, purchaseQuantity: 1 });\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (products.length) {\n\t\t\tsetCurrentProduct(products.find((product) => product._id === id));\n\t\t} else if (data) {\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_PRODUCTS,\n\t\t\t\tproducts: data.products,\n\t\t\t});\n\n\t\t\tdata.products.forEach((product) => {\n\t\t\t\tidbPromise(\"products\", \"put\", product);\n\t\t\t});\n\t\t}\n\t\t// get cache from idb\n\t\telse if (!loading) {\n\t\t\tidbPromise(\"products\", \"get\").then((indexedProducts) => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_PRODUCTS,\n\t\t\t\t\tproducts: indexedProducts,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}, [products, data, loading, dispatch, id]);\n\n\tconst removeFromCart = () => {\n\t\tdispatch({\n\t\t\ttype: REMOVE_FROM_CART,\n\t\t\t_id: currentProduct._id,\n\t\t});\n\n\t\t// upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n\t\tidbPromise(\"cart\", \"delete\", { ...currentProduct });\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t{currentProduct ? (\n\t\t\t\t<div className=\"container my-1\">\n\t\t\t\t\t<Link to=\"/\">← Back to Products</Link>\n\n\t\t\t\t\t<h2>{currentProduct.name}</h2>\n\n\t\t\t\t\t<p>{currentProduct.description}</p>\n\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<strong>Price:</strong>${currentProduct.price} <button>Add to Cart</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tdisabled={!cart.find((p) => p._id === currentProduct._id)}\n\t\t\t\t\t\t\tonClick={removeFromCart}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\tRemove from Cart\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</p>\n\n\t\t\t\t\t<img src={`/images/${currentProduct.image}`} alt={currentProduct.name} />\n\t\t\t\t</div>\n\t\t\t) : null}\n\t\t\t{loading ? <img src={spinner} alt=\"loading\" /> : null}\n\t\t\t<Cart />\n\t\t</>\n\t);\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport { ADD_ORDER } from \"../utils/mutations\";\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n\tconst [addOrder] = useMutation(ADD_ORDER);\n\n\tuseEffect(() => {\n\t\tasync function saveOrder() {\n\t\t\tconst cart = await idbPromise(\"cart\", \"get\");\n\t\t\tconst products = cart.map((item) => item._id);\n\n\t\t\tif (products.length) {\n\t\t\t\tconst { data } = await addOrder({ variables: { products } });\n\t\t\t\tconst productData = data.addOrder.products;\n\n\t\t\t\tproductData.forEach((item) => {\n\t\t\t\t\tidbPromise(\"cart\", \"delete\", item);\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (products.length) {\n\t\t\t\tconst { data } = await addOrder({ variables: { products } });\n\t\t\t\tconst productData = data.addOrder.products;\n\n\t\t\t\tproductData.forEach((item) => {\n\t\t\t\t\tidbPromise(\"cart\", \"delete\", item);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tsetTimeout(() => {\n\t\t\t\twindow.location.assign(\"/\");\n\t\t\t}, 3000);\n\t\t}\n\n\t\tsaveOrder();\n\t}, [addOrder]);\n\n\treturn (\n\t\t<div>\n\t\t\t<Jumbotron>\n\t\t\t\t<h1>Success!</h1>\n\t\t\t\t<h2>Thank you for your purchase!</h2>\n\t\t\t\t<h2>You will now be redirected to the homepage</h2>\n\t\t\t</Jumbotron>\n\t\t</div>\n\t);\n}\n\nexport default Success;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport {\n\tApolloClient,\n\tInMemoryCache,\n\tApolloProvider,\n\tcreateHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Nav from \"./components/Nav\";\nimport Success from \"./pages/Success\";\nimport OrderHistory from \"./pages/OrderHistory\";\nimport { StoreProvider } from \"./utils/GlobalState\";\n\nconst httpLink = createHttpLink({\n\turi: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n\tconst token = localStorage.getItem(\"id_token\");\n\treturn {\n\t\theaders: {\n\t\t\t...headers,\n\t\t\tauthorization: token ? `Bearer ${token}` : \"\",\n\t\t},\n\t};\n});\n\nconst client = new ApolloClient({\n\tlink: authLink.concat(httpLink),\n\tcache: new InMemoryCache(),\n});\n\nfunction App() {\n\treturn (\n\t\t<ApolloProvider client={client}>\n\t\t\t<Router>\n\t\t\t\t<div>\n\t\t\t\t\t<StoreProvider>\n\t\t\t\t\t\t<Nav />\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route exact path=\"/\" component={Home} />\n\t\t\t\t\t\t\t<Route exact path=\"/login\" component={Login} />\n\t\t\t\t\t\t\t<Route exact path=\"/signup\" component={Signup} />\n\t\t\t\t\t\t\t<Route exact path=\"/orderHistory\" component={OrderHistory} />\n\t\t\t\t\t\t\t<Route exact path=\"/products/:id\" component={Detail} />\n\t\t\t\t\t\t\t<Route exact path=\"/success\" component={Success} />\n\t\t\t\t\t\t\t<Route component={NoMatch} />\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</StoreProvider>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t</ApolloProvider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}